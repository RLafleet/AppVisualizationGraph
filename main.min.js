import * as d3 from 'd3';

const svg = d3.select('body').append('svg')
    .attr('width', 10000)
    .attr('height', 6000);

d3.json('graph-data.json').then(data => {
    const nodes = data.nodes;
    const links = data.links;

    const simulation = d3.forceSimulation(nodes)
        .force('link', d3.forceLink(links).id(d => d.id).distance(d => 100 / d.weight))
        .force('charge', d3.forceManyBody())
        .force('center', d3.forceCenter(3000, 2000));
    //.force('x', d3.forceX().x(d => Math.max(0, Math.min(1000, d.x))))
    //.force('y', d3.forceY().y(d => Math.max(0, Math.min(500, d.y))));

    const node = svg.selectAll('circle')
        .data(nodes)
        .enter().append('circle')
        .attr('r',5)
        .attr('fill', 'red');

    const labels = svg.selectAll('text')
        .data(nodes)
        .enter().append('text')
        .text(d => d.id)
        .attr('font-size', '8px')
        .attr('fill', 'black')
        .attr('text-anchor', 'middle')
        .attr('alignment-baseline', 'middle');

    const link = svg.selectAll('line')
        .data(links)
        .enter().append('line')
        .attr('stroke', 'grey')
        .attr('stroke-opacity', 0.6);

    simulation.on('tick', () => {
        // Можно убрать отображение связей для улучшения производительности
        link
            .attr('x1', d => d.source.x)
            .attr('y1', d => d.source.y)
            .attr('x2', d => d.target.x)
            .attr('y2', d => d.target.y);

        node
            .attr('cx', d => d.x)
            .attr('cy', d => d.y);

        labels
            .attr('x', d => Math.max(0, Math.min(30000, d.x)))
            .attr('y', d => Math.max(0, Math.min(30000, d.y)));

    });
});